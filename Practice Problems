-- LECTURE NOTES - SELECT
 SELECT * FROM actor;
 SELECT first_name, last_name FROM  actor;
 -- PRACTICE PROBLEM #1
 SELECT first_name,last_name,email FROM customer;
 
-- LECTURE NOTES - SELECT DISTINCT
SELECT DISTINCT rental_rate FROM film;
-- PRACTICE PROBLEM #2 
SELECT DISTINCT rating FROM film;

-- LECTURE NOTES - SELECT COUNT
SELECT COUNT(DISTINCT amount) FROM payment;
-- LECTURE NOTES - SELECT WHERE
SELECT * FROM customer
WHERE first_name = 'Jared';
--
SELECT COUNT (title) FROM film 
WHERE rental_rate > 4 AND replacement_cost >= 19.99
AND rating = 'R';
-- 
SELECT * FROM film
WHERE rating != 'R';
-- PRACTICE PROBLEM #3 
SELECT email FROM customer
WHERE first_name = 'Nancy' 
AND last_name = 'Thomas';
-- PRACTICE PROBLEM #4 
SELECT description FROM film 
WHERE title = 'Outlaw Hanky';
--PRACTICE PROBLEM #5 
SELECT phone FROM address 
WHERE address = '259 Ipoh Drive';
-- LECTURE NOTES - ORDER BY
SELECT store_id,first_name,last_name FROM customer
ORDER BY store_id DESC,first_name ASC;
--LECTURE NOTES - LIMIT
SELECT * FROM payment
ORDER BY payment_date LIMIT 5;
--PRACTICE PROBLEM #6
SELECT customer_id FROM payment
ORDER BY payment_date LIMIT 10;
--PRACTICE PROBLEM #7
SELECT title,length FROM film
ORDER BY length ASC 
LIMIT 5;
-- BONUS QUESTION
SELECT COUNT(title) FROM film
WHERE length <= '50'
-- LECTURE NOTES - BETWEEN
SELECT * FROM payment
WHERE payment_date BETWEEN '2007-02-01' AND '2007-02-15';
--LECTURE NOTES - IN KEYWORD
SELECT * FROM customer
WHERE first_name IN ('John','Jake','Julie');
-- LECTURE NOTES - LIKE AND ILIKE
-- LIKE - CASE SENSITIVE // ILIKE - CASE INSENSITIVE
SELECT * FROM customer
WHERE first_name LIKE 'J%' AND last_name LIKE 'S%';
--
SELECT * FROM customer
WHERE first_name LIKE '_her%';
-- GENERAL CHALLENGE #1
SELECT COUNT (amount) FROM payment
WHERE amount > 5;
-- GENERAL CHALLENGE #2
SELECT COUNT (*) FROM staff
WHERE first_name LIKE '%P';
-- GENERAL CHALLENGE #3
SELECT COUNT (DISTINCT district) FROM address;
-- GENERAL CHALLENGE #4 
SELECT DISTINCT district FROM address;
-- GENERAL CHALLENGE #5 
SELECT COUNT (*) FROM film
WHERE rating = 'R' AND replacement_cost BETWEEN 5 AND 15;
-- GENERAL CHALLENGE #6 
SELECT COUNT(*) FROM film
WHERE title LIKE '%Truman%';

-- LECTURE - GROUP BY 
-- MAX AND MIN	
SELECT MAX(replacement_cost), MIN(replacement_cost) FROM film;
-- AVERAGE 
SELECT ROUND(AVG(replacement_cost),2) FROM film;
-- SUM
SELECT SUM(replacement_cost) 
FROM film;
-- GROUP BY clause must appear right after a FROM or WHERE statement
SELECT customer_id, SUM(amount) FROM payment
GROUP BY customer_id
ORDER BY COUNT(amount) DESC;

SELECT customer_id,staff_id,SUM(amount) FROM payment
GROUP BY staff_id, customer_id
ORDER BY SUM(amount);

SELECT DATE(payment_date),SUM(amount) FROM payment
GROUP BY DATE(payment_date)
ORDER BY SUM(amount) ASC
-- CHALLENGES - GROUP BY 
-- #1
SELECT staff_id,COUNT(amount) FROM payment
GROUP BY staff_id;
-- #2
SELECT rating,ROUND(AVG(replacement_cost),2) FROM film
GROUP BY rating;
-- #3
SELECT customer_id,SUM(amount) FROM payment
GROUP BY customer_id
ORDER BY SUM(amount) DESC
LIMIT 5;
-- LECTURE - HAVING CLAUSE 
SELECT customer_id,SUM(amount) FROM payment
GROUP BY customer_id
HAVING SUM(amount) > 100;

SELECT store_id,COUNT(customer_id) FROM customer
GROUP BY store_id
HAVING COUNT(customer_id) >300;

-- CHALLENGES - HAVING CLAUSE
--#1
SELECT customer_id,COUNT(amount) FROM payment
GROUP BY customer_id
HAVING COUNT(amount) >= 40;
--#2 
SELECT customer_id, SUM(amount) FROM payment
WHERE staff_id = 2
GROUP BY customer_id
HAVING SUM(amount) > 100;

-- ASSESSMENT #1 
-- #1
SELECT customer_id, SUM(amount) FROM payment
WHERE staff_id = 2
GROUP BY customer_id
HAVING SUM(amount) > 110;
-- #2
SELECT COUNT(title) FROM film
WHERE title LIKE 'J%';
-- #3
SELECT first_name,last_name FROM customer
WHERE first_name LIKE 'E%'
AND address_id < 500
ORDER BY customer_id DESC
LIMIT 1;
-- LECTURE - JOINS - AS CLAUSE
SELECT customer_id, SUM(amount) AS total_spent
FROM payment
GROUP BY customer_id
HAVING SUM(amount) > 100;

SELECT customer_id, amount AS new_name
FROM payment
WHERE amount > 2

-- LECTURE - JOINS - INNER JOIN
SELECT * FROM payment
INNER JOIN customer
ON payment.customer_id = customer.customer_id;

SELECT payment_id,payment.customer_id,first_name
FROM payment
INNER JOIN customer
ON payment.customer_id = customer.customer_id;

-- LECTURE - JOINS - FULL OUTER JOIN
SELECT * FROM customer
FULL OUTER JOIN payment
ON customer.customer_id = payment.customer_id
WHERE customer.customer_id IS null
OR payment.payment_id IS null;
-- LECTURE - JOINS - LEFT OUTER JOIN
-- SELECT * FROM TableA 
-- LEFT OUTER JOIN TableB
-- ON TableA.col_match = TableB.col_match
SELECT film.film_id,title,inventory_id,store_id
FROM film
LEFT JOIN inventory ON 
inventory.film_id = film.film_id
WHERE inventory.film_id IS NULL
-- LECTURE - JOINS - RIGHT JOINS
-- ALMOST THE EXACT SAME AS LEFT JOINS
-- JUST SWITCH UP TABLE ORDER 
-- SELECT * FROM TableA 
-- RIGHT JOIN TableB
-- ON TableA.col_match = TableB.col_match
-- WHERE TableA.id IS NULL
-- LECTURE - UNIONS
-- SELECT column_name(s) FROM table1
-- UNION
-- SELECT column_name(s) FROM table2;

-- JOIN CHALLENGES
SELECT district,email FROM address
INNER JOIN customer ON
address.address_id = customer.address_id
WHERE district = 'California'
-- #2
SELECT title,first_name,last_name FROM film_actor
INNER JOIN actor
ON film_actor.actor_id = actor.actor_id
INNER JOIN film
ON film_actor.film_id = film.film_id
WHERE first_name = 'Nick'
AND last_name = 'Wahlberg';
-- ADVANCED SQL TOPICS
-- TIMESTAMPS/EXTRACT - PART 1
-- TIME - contains ONLY time
-- DATE - contains ONLY date 
-- TIMESTAMP - contains date and time
-- TIMESTAMPTZ - contains date,time, and timezone
-- Depending on the situation, you may not need full TIMESTAMPTZ
-- YOU CAN ALWAYS REMOVE HISTORICAL INFORMATION, BUT NEVER ADD IT IN
SELECT CURRENT_DATE;
SELECT CURRENT_TIME;
-- EXTRACT()
-- Allows you to "extract" or obtain a sub-component of a date value 
-- YEAR,MONTH,DAY,WEEK,QUARTER
-- AGE()
/* Calculates and returns the current age given a timestamp */
-- USAGE
/* AGE(date_col) */
-- RETURNS 
/* 13 years 1 mon 5 days 
hours,minutes,seconds - 01:34:13.003423 
*/
-- TO_CHAR()
/* General function to convert data types to text 
   Useful for timestamp formatting 
*/
-- USAGE 
/* TO_CHAR(date_col,'mm-dd-yyyy') */
-- Examples!!
SELECT TO_CHAR(payment_date,'MM/dd/YYYY')
FROM payment;
-- TIMESTAMPS AND EXTRACT CHALLENGES 
-- #1 
SELECT DISTINCT(TO_CHAR(payment_date,'Month')) FROM payment;
-- #2
SELECT COUNT(*)
FROM payment
WHERE EXTRACT(DOW FROM payment_date)= 1;

-- MATHEMATICAL FUNCTIONS AND OPERATORS 
SELECT ROUND(rental_rate/replacement_cost,2) * 100 AS percent_cost
FROM film;
SELECT 0.1 * replacement_cost AS deposit FROM film;

-- STRING FUNCTIONS AND OPERATIONS
 -- getting the length
SELECT LENGTH(first_name) FROM customer;
-- string concatenation
SELECT first_name || '--' || last_name AS full_name
FROM customer; 
-- complex example of string concat
SELECT LOWER (LEFT(first_name,1)) || LOWER (last_name) || '@gmail.com'
FROM customer;

-- LECTURE - SUB QUERIES 
/* 
SELECT column_name
FROM table_name
WHERE EXISTS
(SELECT column_name FROM table_name WHERE condition);
*/
-- EXAMPLES OF SUB QUERIES
-- #1
SELECT title,rental_rate
FROM film
WHERE rental_rate > (SELECT AVG(rental_rate) FROM film);
-- #2
SELECT film_id,title
FROM film
WHERE film_id IN
(SELECT inventory.film_id 
FROM rental 
INNER JOIN inventory ON inventory.inventory_id = rental.inventory_id
WHERE return_date BETWEEN '2005-05-29' AND '2005-05-30')
ORDER BY title;
-- EXISTS OPERATOR 
SELECT first_name,last_name
FROM customer AS c 
WHERE EXISTS 
(SELECT * FROM payment AS p 
WHERE p.customer_id = c.customer_id
AND amount > 11);

-- LECTURE - SELF JOIN - join of two copies of the same table
/* Useful for comparing values in a column 
   of rows within the same table 
   When using self join, it is NECESSARY to use an alias 
   for the table, otherwise tables = ambiguous */
   
   -- EXAMPLE SYNTAX 
/* SELECT tableA.col,tableB.col
   FROM table AS tableA
   JOIN table AS tableB ON 
   tableA.some_col = tableB.other_col */


-- ASSESSMENT #2 
-- QUESTION 1 
SELECT * FROM cd.facilities;
-- QUESTION 2 
SELECT name, membercost FROM cd.facilities;
-- QUESTION 3
SELECT * FROM cd.facilities
WHERE membercost > 0;
-- QUESTION 4 
SELECT facid, name, membercost, monthlymaintenance 
FROM cd.facilities 
WHERE membercost > 0 AND membercost < monthlymaintenance/50;
-- QUESTION 5 
SELECT * FROM cd.facilities
WHERE name LIKE '%Tennis%';
-- QUESTION 6 
SELECT * FROM cd.facilities 
WHERE facid = 1 OR facid = 5;
-- QUESTION 7 
SELECT memid,surname,firstname,joindate FROM cd.members
WHERE joindate >= '2012-09-01';
-- QUESTION 8 
SELECT DISTINCT surname FROM cd.members
ORDER BY surname ASC
LIMIT 10;
-- QUESTION 9 
SELECT MAX (joindate) FROM cd.members;
-- QUESTION 10
SELECT COUNT (name) FROM cd.facilities
WHERE guestcost >= 10;
-- QUESTION 11
SELECT facid, SUM(slots) AS Total_Number_of_Slots
FROM cd.bookings
WHERE cd.bookings.starttime BETWEEN '2012-09-01' AND '2012-09-30'
GROUP by facid
ORDER BY SUM(slots);
-- QUESTION 12 
SELECT facid, SUM(slots) AS Total_Number_of_Slots
FROM cd.bookings
GROUP BY facid
HAVING SUM(slots) > 1000
ORDER BY facid;
-- QUESTION 13
SELECT starttime, name
FROM cd.bookings
INNER JOIN cd.facilities ON cd.facilities.facid = cd.bookings.facid
WHERE name LIKE '%Tennis Court%' AND starttime BETWEEN '2012-09-21 00:00:00' AND '2012-09-21 23:59:59' 
ORDER BY starttime;
-- QUESTION 14
SELECT starttime
FROM cd.bookings
INNER JOIN cd.members ON cd.members.memid = cd.bookings.memid
WHERE surname LIKE '%Farrell%' AND firstname LIKE '%David%'
ORDER BY starttime;

-- Creating Databases and Tables 
-- Data Types 
/*
Boolean - True or False 
Character - char,varchar,and text
Numeric - integer and floating-point number
Temporal - date,time,timestamp,and interval
UUID - Universally Unique identifiers 
Array - Stores an array of strings, numbers,etc
 
/* When creating a database and table, take time to 
   plan for long term storage 
   You can alwats remove historical information you've
   decided you aren't using, but you can NOT go back
   in time to add in information
*/ 

-- PRIMARY AND FOREIGN KEYS 
/* 
	Primary Key - column or group of columns used to 
	identify a row uniquely in a table
	
*/
