-- LECTURE NOTES - SELECT
 SELECT * FROM actor;
 SELECT first_name, last_name FROM  actor;
 -- PRACTICE PROBLEM #1
 SELECT first_name,last_name,email FROM customer;
 
-- LECTURE NOTES - SELECT DISTINCT
SELECT DISTINCT rental_rate FROM film;
-- PRACTICE PROBLEM #2 
SELECT DISTINCT rating FROM film;

-- LECTURE NOTES - SELECT COUNT
SELECT COUNT(DISTINCT amount) FROM payment;
-- LECTURE NOTES - SELECT WHERE
SELECT * FROM customer
WHERE first_name = 'Jared';
--
SELECT COUNT (title) FROM film 
WHERE rental_rate > 4 AND replacement_cost >= 19.99
AND rating = 'R';
-- 
SELECT * FROM film
WHERE rating != 'R';
-- PRACTICE PROBLEM #3 
SELECT email FROM customer
WHERE first_name = 'Nancy' 
AND last_name = 'Thomas';
-- PRACTICE PROBLEM #4 
SELECT description FROM film 
WHERE title = 'Outlaw Hanky';
--PRACTICE PROBLEM #5 
SELECT phone FROM address 
WHERE address = '259 Ipoh Drive';
-- LECTURE NOTES - ORDER BY
SELECT store_id,first_name,last_name FROM customer
ORDER BY store_id DESC,first_name ASC;
--LECTURE NOTES - LIMIT
SELECT * FROM payment
ORDER BY payment_date LIMIT 5;
--PRACTICE PROBLEM #6
SELECT customer_id FROM payment
ORDER BY payment_date LIMIT 10;
--PRACTICE PROBLEM #7
SELECT title,length FROM film
ORDER BY length ASC 
LIMIT 5;
-- BONUS QUESTION
SELECT COUNT(title) FROM film
WHERE length <= '50'
-- LECTURE NOTES - BETWEEN
SELECT * FROM payment
WHERE payment_date BETWEEN '2007-02-01' AND '2007-02-15';
--LECTURE NOTES - IN KEYWORD
SELECT * FROM customer
WHERE first_name IN ('John','Jake','Julie');
-- LECTURE NOTES - LIKE AND ILIKE
-- LIKE - CASE SENSITIVE // ILIKE - CASE INSENSITIVE
SELECT * FROM customer
WHERE first_name LIKE 'J%' AND last_name LIKE 'S%';
--
SELECT * FROM customer
WHERE first_name LIKE '_her%';
-- GENERAL CHALLENGE #1
SELECT COUNT (amount) FROM payment
WHERE amount > 5;
-- GENERAL CHALLENGE #2
SELECT COUNT (*) FROM staff
WHERE first_name LIKE '%P';
-- GENERAL CHALLENGE #3
SELECT COUNT (DISTINCT district) FROM address;
-- GENERAL CHALLENGE #4 
SELECT DISTINCT district FROM address;
-- GENERAL CHALLENGE #5 
SELECT COUNT (*) FROM film
WHERE rating = 'R' AND replacement_cost BETWEEN 5 AND 15;
-- GENERAL CHALLENGE #6 
SELECT COUNT(*) FROM film
WHERE title LIKE '%Truman%';

-- LECTURE - GROUP BY 
-- MAX AND MIN	
SELECT MAX(replacement_cost), MIN(replacement_cost) FROM film;
-- AVERAGE 
SELECT ROUND(AVG(replacement_cost),2) FROM film;
-- SUM
SELECT SUM(replacement_cost) 
FROM film;
-- GROUP BY clause must appear right after a FROM or WHERE statement
SELECT customer_id, SUM(amount) FROM payment
GROUP BY customer_id
ORDER BY COUNT(amount) DESC;

SELECT customer_id,staff_id,SUM(amount) FROM payment
GROUP BY staff_id, customer_id
ORDER BY SUM(amount);

SELECT DATE(payment_date),SUM(amount) FROM payment
GROUP BY DATE(payment_date)
ORDER BY SUM(amount) ASC
-- CHALLENGES - GROUP BY 
-- #1
SELECT staff_id,COUNT(amount) FROM payment
GROUP BY staff_id;
-- #2
SELECT rating,ROUND(AVG(replacement_cost),2) FROM film
GROUP BY rating;
-- #3
SELECT customer_id,SUM(amount) FROM payment
GROUP BY customer_id
ORDER BY SUM(amount) DESC
LIMIT 5;
-- LECTURE - HAVING CLAUSE 
SELECT customer_id,SUM(amount) FROM payment
GROUP BY customer_id
HAVING SUM(amount) > 100;

SELECT store_id,COUNT(customer_id) FROM customer
GROUP BY store_id
HAVING COUNT(customer_id) >300;

-- CHALLENGES - HAVING CLAUSE
--#1
SELECT customer_id,COUNT(amount) FROM payment
GROUP BY customer_id
HAVING COUNT(amount) >= 40;
--#2 
SELECT customer_id, SUM(amount) FROM payment
WHERE staff_id = 2
GROUP BY customer_id
HAVING SUM(amount) > 100;

-- ASSESSMENT #1 
-- #1
SELECT customer_id, SUM(amount) FROM payment
WHERE staff_id = 2
GROUP BY customer_id
HAVING SUM(amount) > 110;
-- #2
SELECT COUNT(title) FROM film
WHERE title LIKE 'J%';
-- #3
SELECT first_name,last_name FROM customer
WHERE first_name LIKE 'E%'
AND address_id < 500
ORDER BY customer_id DESC
LIMIT 1;
-- LECTURE - JOINS - AS CLAUSE
SELECT customer_id, SUM(amount) AS total_spent
FROM payment
GROUP BY customer_id
HAVING SUM(amount) > 100;

SELECT customer_id, amount AS new_name
FROM payment
WHERE amount > 2
